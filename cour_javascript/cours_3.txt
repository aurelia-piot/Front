                            FONCTIONS



les instructions
un script JS est un fichier contenant des instructions, placées les unes a la suite des autres .
chacune des ces instructions peut etre vu comme un ordre donner au moteur JS d'une action que l'on souhaite realiser , à la maniere d'une recette de cuisine:
    -faire fondre le beurre
    -melanger le beure et la farine
    -Verser le Chocolat petit à petit 
    -ect

les instructions se suivent et sont effectuée les unes a la suites des autres, du haut vers le bas(comme en CSS), le browser parse (analyse) dans l'ordre du flux.

chaques instructions Doit ce terminer par un point-virgule ";" affin d'indiquer au moteur JS que l'instruction est terminée. 

en l'absence de ";" en fin d'instruction, seul la ligne 1 s'executera, mais pas la suivante

alert("ok ça marche");
        [1, 2].forEach(alert);

//ici comme on a bien mis le point virgule a la fin de l'instruction, le foreach s'execute bien et donc on voit bien 3 alert s'afficher successivement





les fonctions permettent de regrouper un ensemble/une serie d'instructions pour pouvoir les réutiliser. 

quand on a besoin du code d'une serie d'instruction , plutot que ré ecrire a chaque fois toute les instructions, on appellera une fonction par son nom(FaireUnGateau).Cette fonction Contient l'ensemble des instruction à executer. 

 par exemple la fonction "alert" est une fonction native (integrer au navigateur )qui contient en gros les instruction suivantes:
        -   créer un cadre de la boite de dialogue
        -   positionner le cadre dans la fenetre
        -   créer un background semi transparent sur toute la page
        -   placer un bouton avec le text OK et un evenement Click
        -   Créer une zone de texte qui s'affichera le text de l'alerte a presenter aux visiteurs

 nous on a juste besoin d'utiliser la fonction alert() en lui donnant un argument(parametre) / ex 
            alert("coucou").
   La fonction executera toutes ces instruction à chaque fois 
   On peut utiliser cette fonction Alert quand on veut en la declenchant avec alert(quelquechose).
               ce quelquechsose) est un argument attendu par la fonction.

 Ls fonction querySelector et alert() sont disponible dans le navigateur, ce sont des <strong>Methodes</strong>.    

 si on vois quelque chose qui ressemble à une variable et qui est suivi de parenthese, c'est une fonction

 Le fonctions prennent souvent des  arguments (-des bout de données dont elles ont besoins pour faire leur travail. Les arguments sont placé ENTRE les parenthese, séparées par des virgules, si il y en a plusieurs.)           

par exemple la fonction alert() fait apparaitre un pop-up mais vous devez donner une chaine comme argument pour indiquer à la fonction ce que vous souhiatez ecrire dans la fenetre.

nous pouvons ecrire nos propre fonctions

 //2em exemple de fonction native
        var maVariable = document.querySelector('h2');
        alert("coucou 1");



        //1er façon de declarer une fonction

        function disBonjour(){
            document.write("Bonjour !");
        }
//pour declancher la fonction (invoquer la fonction) il faut indiquer au moteur JS d'executer la Fonctioncar elle ne s'execute pas toute seul
 disBonjour();

 // 2em façon de declarer une fonction :
 //assigner une fonction a une variable

 disHello = function(){
     document.write('Hello!');
 }
 // invoquer/declancher la fonction en ecrivant un couple de parenthese apres le nom de la fonction (c'est ce couple de parenthese qui declanche l'execution de la fonction)

 disHello();


 ici la variable disHello contient une reference à la fonction, on peut dire qu'elle pointe du doigt la fonction elle-meme
 un fonction qui n'a pas son propre nom est appelée un fonction anonyme

 //3em façon de declarer  une fonction et de l'invoquer
 function ditHola(){
     return "hola !";
 }
 salutation = ditHola();
     document.write(salutation);

 ici on vient de stocker dans une variable externe a la fonction, la valeur créée par cette fonction

function addition(num1, num2){
     //num 1 et num2 sont des parrametre attendu par la fonction addition
     resultat = num1 +num2;
     return resultat; //qui envoie le resultat a l'exterieur de la fonction
 }
 //dans l'invocation de la fonction on envoie deux arguments 
 document.write(    addition(2,6) + "<br>"  );
// ici le 2 devient l'argument num1 et le 6 devient l'argument num2


///////////////////////////         EVENEMENT ///////////////////

   document.querySelector('html')
            .addEventListener('click',function(){
                alert('tu as cliqué');
            })
    addEventListener attend 2 arguments : 1- l'evenement (on click..ect)
                                          2- l'action que l'on va declencher 
                                            (ici une alert())


//////////////////// 26-02-2019 ///////////////////////////////////////////////
  corriger_mozilla.html
//la fonction qui va changer/switcher l'image lorsque l'on clique dessus
        //ici on stocke dans la variable monImage la premiere image du document (car query.Selector('img') semectionnera la premiere image du html)
        //sinon on utilise querySelectorAll('img')[0]; pour selectionner une image en particuliere en  precisant l'enfant n°dans les crochets "[]"
        var monImage = document.querySelector('img');
        console.log(monImage);//pour voir dans la console
        
        //on ajoute un ecouteur d'evenement (addEventListener) pour ajouter un ecouteur de "click" sur l'image
        //addEventListener attend 2 parametre 
        //1- l'evenement (click)
        // ,
        //2- l'action a realiser apres l'evenement (changer la source de l'image )
        monImage.addEventListener("click",function(){
            //on recupere dans une variable maSrc, la valeur actuelle de l'attribut src de monImage. On va utiliser la méthose getAttribute(), l'argument attendu pour cette methode est le nom d'un autre attribut de balise html (ici ça sera src)
        var maSrc = monImage.getAttribute('src');   

            //alert('click');
            //alert et le console.log sont ici pour verifier si l'addEventListener fonctionne


        var maSrc = monImage.getAttribute('src');

          console.log(maSrc)  

        //SI (la valeur de la varirable maSrc est egal à "images/logo_firefox1.png"(source de l'image 1))
          //alors
             //alert ("je suis l'image 1")
          //sinon
             //alert("ma src n'est pas l'image 1")  

// premiere version de cette condition pour tester
        
   /* if(condition){
        instruction 1;
    }
    else{
        instuction 2;
    }*/     


         if(maSrc === 'images/logo_firefox_1.png'){
        alert("je suis l'image 1");

    }
    else{
        alert("je ne suis pas l'image 1");

    } 

  //seconde version : ici on va intervertir les images avec la methode setAttribute qui attend 2 arguments

    //1 - attribut ciblé (ici se sera src)
    // 2: sa nouvelle valeur (ici ça sera images/logo_firefox_2.png)


    //on veut remplacer la source de la 1er image par la source de la 2eme image

        if(maSrc === 'images/logo_firefox_1.png'){
        //alert("je suis l'image 1, ma source est "+ maSrc);
        monImage.setAttribute('src','images/logo_firefox_2.png');

    }
    //ensuite on veut remplacer la source de la 2eme image par la source de la 1ere image
    else{
        //alert("je ne suis pas l'image 1 ,ma source est "+ maSrc);
        monImage.setAttribute('src', 'images/logo_firefox_1.png');


    }   
});


/*Dans le code precedent on a fait:
1/ on click sur l'image (dans la fonction addEventListener)
2/ on a utilisé la structure conditionnelle  if else pour voir si la valeur de l'attribut  src est egal au chemin de l'image originale
3/ si c'est le cas , on change la valeur de cet attribut en lui indiquant le chemin vers la seconde image
4/ si ce n'est pas le cas (ce qui signnifie que l'image a ete changée), la valeur de l'attribut src revient a ca valeur initiale
*/

// Prochaine fonction : ajouter un message d'accueil personalisé , on va changer le titre de la page pour inclure un message pour le visiteur du site, Ce message sera conserver quand l'utilisateur quittera le site et si il y revient  plus tard.
//on va conserver ce message dans le cache du navigateur en utilisant l'API webstorage

//au final, on ajoutera une option sur le bouton ,pour pouvoir changer d'utilisateur et le message d'accueil si besoin.


//1ere etape : recupérer dans une variable monTitre le 1er h1 du document et l'afficher en console


var monTitre = document.querySelector('h1');
console.log(monTitre);

//2eme etape : recupere dans une variable monbouton le 1er bouton du document et l'afficher en console

var monBouton = document.querySelector('button');
console.log(monBouton);

//preparer la fonction du message d'accueil ( qui sera invoquer/declencher/executer plus tard)

function definirNomUtilisateur(){
    var monNom = prompt('votre nom pls');
    localStorage.setItem("nomUtilisateur",monNom);
    //permet de stocker le nom de l'utilisateur dans le cache du navigateur (grace a  localStorage (qui est une API) et .setItem("nomUtilisateur",monNom); qui créer ça propre variable (nomUtilisateur)a partire de notre variable js "monNom").
    monTitre.textContent= "Bienvenue"+monNom;

}
// ensuite 
//tester si le nom est deja dans le cache,
// si il n'y est pas , on demande avec un prompte le nom de l'utilisateur (declanche la fonction 'definirNomUtilisateur')
//et si le nom est deja dans le cache, on le recupère et on l'affiche dans le titre




// pour tester: vider le localStorage
//localStorage.clear();

//test du nom dans le cache
if(!localStorage.getItem('nomUtilisateur')){
    alert('le cache est vide')
    definirNomUtilisateur();
    //si le cache est vide; on demande son nom
}
else{
    //si il a son nom, on le recupere
    var nomEnrengistre = localStorage.getItem('nomUtilisateur');
    monTitre.textContent="Bienvenue à nouveau "+ nomEnrengistre;

}



 //ensuite - au click sur le bouton , invoquer la fonction definirNomUtilisateur 
 /*monBouton.addEventListener('click',definirNomUtilisateur());*/
 monBouton.addEventListener('click',function(){
     definirNomUtilisateur();
 

 })


 /*explication de la fonction
 cette fonction utilise la methode prompte qui affiche une boite de dialogue, un peu comme une alert(), sauf qu'elle permet a l'utilisateur de saisir des données et de les enrengister dans une variable quand l'utilisateur click sur OK

 Dans notre exemple on demande a l'utilisateur de saisir son nom
 ensuite nous appelons L'API localStrorage qui permet de stocker des donnée dans le navigateur pour pouvoir le reutiliser ulterieurment
 Nous utilisons la fonction setItem de cet API pour stocker la donnée qui nous intérresse dans un conteneur appelé nomUtilisateur. La valeur stockée ici est la valeur de la variable monNom qui contient le nom saisie par l'utilisateur dans le prompte.

 au final on utilise la propriete textContent du titre pour lui affecter un nouveau contenu.
*/
/*
le block de la conditionnel if else utilise l'operateur de negation 'Not' = '!' pour verifier si le navigateur possede une donnée enrengistrée appelée nomUtilisateur ou pas.
sinon , la fonction definirNomUtilisateur est invoquer pour créer cette donnée.

si elle existe ( au caus ou l'utilisateur est deja venus sur la page,) on la recupere avec la methode getItem()

pour finir on definit le contenu de textContent pour le titre avec une concaténation de chaine suivie du nom de l'utilisateur.

Enfin , on associe le gestionnaire d'evenement 'click' au bouton.

quand l'utilisateur cliquera sur le bouton , ça declenchera l'execution de la fonction definirNomUtilisateur();

Ce bouton permet donc a l'utilisateur de modifer son nom si il le souhaite.






 */
